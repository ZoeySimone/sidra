// Code generated by protoc-gen-sidra; DO NOT EDIT.

package {{.PackageName}}

import (
    {{- if .HasServices}}
    "context"
    {{- end}}
	"errors"

    {{- if .HasServices}}
    "github.com/hashicorp/terraform-plugin-sdk/v2/diag"
    {{- end}}
    "github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

{{range .Messages}}

func resource{{.GoName}}() *schema.Resource {
    return &schema.Resource {
        {{- if .Create}}
        CreateContext: create{{.GoName}},
        {{- end}}
        {{- if .Read}}
        ReadContext: read{{.GoName}},
        {{- end}}
        {{- if .Update}}
        UpdateContext: update{{.GoName}},
        {{- end}}
        {{- if .Delete}}
        DeleteContext: delete{{.GoName}},
        {{- end}}
        {{- if .Exists}}
        ExistsContext: exists{{.GoName}},
        {{- end}}
        Schema: map[string]*schema.Schema{
        {{- range .Fields}}
            "{{.Name}}": {
                {{- if .Type}}
                Type: {{.Type}},
                {{- end}}
                {{- if .Optional}}
                Optional: true,
                {{- end}}
                {{- if .Required}}
                Required: true,
                {{- end}}
                {{- if .Computed}}
                Computed: true,
                {{- end}}
                {{- if .Description}}
                Description: "{{.Description}}",
                {{- end}}
                {{- if .Elem}}
                Elem: &schema.Schema{
                    Type: {{.Elem.Type}},
                },
                {{- end}}
                {{- if .SubSchema}}
                Elem: map[string]*schema.Schema {
                {{- range .SubSchema.Fields}}
                    "{{.Name}}": {
                        {{- if .Type}}
                        Type: {{.Type}},
                        {{- end}}
                        {{- if .Optional}}
                        Optional: true,
                        {{- end}}
                        {{- if .Required}}
                        Required: true,
                        {{- end}}
                        {{- if .Computed}}
                        Computed: true,
                        {{- end}}
                        {{- if .Description}}
                        Description: "{{.Description}}",
                        {{- end}}
                        {{- if .Elem}}
                        Elem: &schema.Schema{
                            Type: {{.Elem.Type}},
                        },
                        {{- end}}
                        {{- if .SubSchema}}
                        Elem: map[string]*schema.Schema {
                        {{- range .SubSchema.Fields}}
                            "{{.Name}}": {
                                Type: {{.Type}},
                            },
                        {{- end}}
                        },
                        {{- end}}
                        {{- if .Deprecated}}
                        Deprecated: "Field {{.Name}} has been deprecated.",
                        {{- end}}
                        {{- if .Sensitive}}
                        Sensitive: {{.Sensitive}},
                        {{- end}}
                    },
                {{- end}}
                },
                {{- end}}
                {{- if .Deprecated}}
                Deprecated: "Field {{.Name}} has been deprecated.",
                {{- end}}
                {{- if .Sensitive}}
                Sensitive: {{.Sensitive}},
                {{- end}}
            },
        {{- end}}
        },
    }
}

func flatten{{.GoName}}(d *schema.ResourceData, i interface{}) error {
    r, ok := i.(*{{.GoName}})
    if !ok {
        return errors.New("bad input")
    }
    {{- range .Fields}}
    if err := d.Set("{{.Name}}", r.Get{{.GoName}}()); err != nil {
        return err
    }
    {{- end}}

    return nil
}

{{- if .Create}}
func create{{.GoName}}(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
    client := meta.(*apiClient)
    req := &{{.Create.ParameterType}}{}
    {{- range .Fields}}
    req.{{.GoName}} = d.Get("{{.Name}}").({{.GoType}})
    {{- end}}

    resp, err := client.{{.Create.Function}}(ctx, req)
    if err != nil {
        return diag.FromErr(err)
    }

    flatten{{.Create.ReturnType}}(d, resp)

    d.SetId(req.{{.IDField.GoName}})

    return nil
}

{{- end}}
{{- if .Read}}

func read{{.GoName}}(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
    client := meta.(*apiClient)
    id := d.Get("{{.IDField.Name}}").({{.IDField.GoType}})

    req := &{{.Read.ParameterType}}{}
    req.{{.IDField.GoName}} = id

    resp, err := client.{{.Read.Function}}(ctx, req)
    if err != nil {
        return diag.FromErr(err)
    }

    if err := flatten{{.Read.ReturnType}}(d, resp); err != nil {
        return diag.FromErr(err)
    }

    return nil
}

{{- end}}
{{- if .Update}}

func update{{.GoName}}(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
    client := meta.(*apiClient)
    req := &{{.Update.ParameterType}}{}
    {{- range .Fields}}
    req.{{.GoName}} = d.Get("{{.Name}}").({{.GoType}})
    {{- end}}

    resp, err := client.{{.Update.Function}}(ctx, req)
    if err != nil {
        return diag.FromErr(err)
    }

    if err := flatten{{.Update.ReturnType}}(d, resp); err != nil {
        return diag.FromErr(err)
    }

    return nil
}

{{- end}}
{{- if .Delete}}

func delete{{.GoName}}(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
    client := meta.(*apiClient)
    id := d.Get("{{.IDField.Name}}").({{.IDField.GoType}})

    req := &{{.Delete.ParameterType}}{}
    req.{{.IDField.GoName}} = id

    resp, err := client.{{.Delete.Function}}(ctx, req)
    if err != nil {
        return diag.FromErr(err)
    }

    if err := flatten{{.Delete.ReturnType}}(d, resp); err != nil {
        return diag.FromErr(err)
    }

    return nil
}

{{- end}}
{{end}}
