// Code generated by protoc-gen-sidra; DO NOT EDIT.

package {{.PackageName}}

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/plugin"
)

type apiClient struct {
	{{- range .Services}}
	{{.ServiceName}}Client
	{{- end}}
}

type ApiClient func(clients *apiClient)

{{- range .Services}}
func With{{.ServiceName}}Client(c {{.ServiceName}}Client) ApiClient {
	return func(clients *apiClient) {
		clients.{{.ServiceName}}Client = c
	}
}
{{- end}}

func StartTerraformProvider(clients ...ApiClient) {
	plugin.Serve(&plugin.ServeOpts{
		ProviderFunc: provider(clients...),
	})
}

func provider (clients ...ApiClient) func() *schema.Provider {
return func() *schema.Provider {
	p := &schema.Provider{
		ResourcesMap: map[string]*schema.Resource{
		{{- range .Resources}}
		{{- range .Messages}}
			"{{$.ProviderName}}_{{.Name}}": resource{{.GoName}}(),
		{{- end}}
		{{- end}}
		},
	}

	p.ConfigureContextFunc = configure(clients...)

	return p
	}
}

func configure(clients ...ApiClient) func(context.Context, *schema.ResourceData) (interface{}, diag.Diagnostics) {
	return func(context.Context, *schema.ResourceData) (interface{}, diag.Diagnostics) {
		client := &apiClient{}
		for _, c := range clients {
			c(client)
		}
		return client, nil
	}
}
